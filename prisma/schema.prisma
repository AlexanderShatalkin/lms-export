generator client {
  output          = "./client"
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LegalType {
  OFFER
  POLICY
  AGREEMENT
}

enum LegalStatus {
  DRAFT
  PUBLISHED
}

enum NotificationType {
  TASK_ON_REVIEW
  INVITE_TO_STUDY_GROUP
  INVITE_TO_COURSE
  TASK_NEED_WORK
  CREATE_REWORK
  CREATE_USER_WORK
  CREATE_TASK_SCORE
}

enum ColumnType {
  BY_TASK
  MANUAL
}

enum UserAnswerLogType {
  CHANGE_STATUS
  EDIT_ANSWER
  EDIT_ANSWER_BY_PASTE
  EDIT_ANSWER_BY_PASTE_FROM_OUTSIDE
  COPY_ANSWER
}

enum ChatType {
  GROUP
  SINGLE
  ACTIVITY
}

enum ChatUserRole {
  OWNER
  ADMIN
  USER
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
  GUEST
}

enum AccessTag {
  MANAGE_CHANGE_LOGS
  MANAGE_LEGAL
}

enum InitiatorType {
  SYSTEM
  ADMIN
  TEACHER
  STUDENT
  SUPPORT
}

enum UserDisableState {
  DELETED
  BANNED
  NOT_CONFIRMED
}

enum CourseMemberRole {
  OWNER
  SEMINARIAN
  NONE
}

enum CourseMemberAccessTag {
  EDIT_TEMPLATE
  CREATE_STUDY_GROUP
}

enum CourseMemberActivateState {
  INVITED
  ACTIVATED
  DECLINED
}

enum StudyGroupMemberRole {
  STUDENT
  HEAD_BOY
  SEMINARIAN
  NONE
}

enum StudyGroupMemberActiveState {
  INVITED
  ACTIVATED
  DECLINED
}

enum InputType {
  EDITOR
  FILE
}

enum CourseTagType {
  TASK_TEMPLATE
  WORK_TEMPLATE
  CODE_TASK
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  NEED_WORKS
  DONE
}

enum MaterialContentType {
  FILE
  LINK
  PAGE
}

enum IssueType {
  BUG
  FEATURE
  IMPROVEMENT
}

enum IssuePriority {
  HIGH
  MEDIUM
  LOW
}

enum ComputedColumnShowFormat {
  ALL
  AUTO
  SELECTED
}

enum IssueStatus {
  DONE
  DISCUSSION
  IN_PROGRESS
  MODERATION
  APPROVE
  REJECT
}

enum UploadType {
  MATERIAL
  WORK
  USER_ANSWER
  CHAT
  AVATAR
  OTHER
  WORK_NOTE
  ACTIVITY
}

enum CodeTaskDifficulty {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CodeDataType {
  INT
  STRING
  BOOLEAN
  ARRAY_INT
  ARRAY_STRING
  ARRAY_BOOLEAN
}

enum ProgrammingLanguage {
  C_PLUS
  PYTHON
  JS
  TS
  PYTHON2
  JAVA
}

enum TestCaseRunStatus {
  SUCCESS
  ERROR
  PENDING
}

enum QuizExerciseAnswerType {
  TEXT
  BUTTON
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique @db.VarChar(255)
  password               String                  @db.VarChar(255)
  firstName              String                  @db.VarChar(100)
  lastName               String                  @db.VarChar(100)
  middleName             String                  @db.VarChar(100)
  avatarUrl              String?
  role                   UserRole                @default(STUDENT)
  confirmToken           String?                 @db.VarChar(255)
  lastSignIn             DateTime
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  disableState           UserDisableState?       @default(NOT_CONFIRMED)
  accessTags             AccessTag[]
  userData               UserData[]
  accessFlags            AccessFlag[]
  courses                Course[]
  courseMembers          CourseMember[]
  studyGroup             StudyGroup[]
  studyGroupMember       StudyGroupMember[]
  taskTemplates          TaskTemplate[]
  workTemplates          WorkTemplate[]
  courseTags             CourseTag[]
  studyWorks             StudyWork[]
  userWorks              UserWork[]
  userWorkComments       UserWorkComment[]
  materials              Material[]
  reworks                Rework[]
  activities             Activity[]
  announcementViews      AnnouncementView[]
  notifications          Notification[]
  userWorkAnswers        UserWorkAnswer[]
  initiatorNotification  Notification[]          @relation(name: "initiator")
  scores                 Score[]
  estimatorScores        Score[]                 @relation(name: "estimator")
  activityUserStatistics ActivityUserStatistic[]
  taskComments           TaskComment[]
  eventLogs              EventLog[]
  createdChats           Chat[]
  chatInviters           ChatUser[]              @relation(name: "inviter")
  chatUsers              ChatUser[]
  messages               Message[]
  reactionMessage        ReactionMessage[]
  reaction               Reaction[]
  readedMessages         ReadedMessages[]
  userAnswerLogs         UserAnswerLog[]
  changeLogReactions     ChangeLogReaction[]
  issues                 Issue[]
  issueReactions         IssueReaction[]
  issueComments          IssueComment[]
  issueCommentReactions  IssueCommentReaction[]
  workNotes              WorkNote[]
  workNoteAnswers        WorkNoteAnswer[]
  examTasks              ExamTask[]
  examTickets            ExamTicket[]
  sessions               Session[]
  codeTasks              CodeTask[]
  codeSolutions          CodeSolution[]
  quizUserAnswers        QuizUserAnswer[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model UserData {
  userId          Int      @id
  theme           String   @db.VarChar(100)
  lang            String   @db.VarChar(100)
  sidebarSettings Json     @db.JsonB
  tableSettings   Json     @db.JsonB
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  courseId        String?
}

model AccessFlag {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  users     User[]
  courseId  String?
}

model CustomSymbol {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  value     String   @db.VarChar(255)
  quickType String?  @db.VarChar(100)
  active    Boolean  @default(true)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id               String            @id @default(cuid())
  name             String            @db.VarChar(255)
  shortName        String            @db.VarChar(6)
  description      String?
  avatarUrl        String?
  ownerId          Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deleted          Boolean           @default(false)
  owner            User              @relation(fields: [ownerId], references: [id])
  courseMembers    CourseMember[]
  studyGroups      StudyGroup[]
  taskTemplates    TaskTemplate[]
  workTemplates    WorkTemplate[]
  courseTags       CourseTag[]
  materials        Material[]
  announcements    Announcement[]
  customSymbols    CustomSymbol[]
  activityTypes    ActivityType[]
  workTypes        WorkType[]
  materialTypes    MaterialType[]
  workVariantTypes WorkVariantType[]
  activities       Activity[]
  eventLogs        EventLog[]
  computedColumns  ComputedColumn[]
  works            Work[]
  workNotes        WorkNote[]
  examTasks        ExamTask[]
  examTickets      ExamTicket[]
  codeTasks        CodeTask[]
  chats            Chat[]
  quizzes          Quiz[]
}

model CourseMember {
  id          Int                       @id @default(autoincrement())
  userId      Int
  courseId    String
  role        CourseMemberRole
  accessTags  CourseMemberAccessTag[]   @default([])
  activeState CourseMemberActivateState @default(INVITED)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  user        User                      @relation(fields: [userId], references: [id])
  course      Course                    @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model StudyGroup {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(255)
  avatarUrl         String?
  ownerId           Int
  courseId          String
  allowRework       Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deleted           Boolean            @default(false)
  archived          Boolean            @default(false)
  owner             User               @relation(fields: [ownerId], references: [id])
  course            Course             @relation(fields: [courseId], references: [id])
  studyGroupMembers StudyGroupMember[]
  studyWorks        StudyWork[]
  reworks           Rework[]
  activities        Activity[]
  announcements     Announcement[]
  columns           Column[]
  eventLogs         EventLog[]
  computedColumns   ComputedColumn[]
  works             Work[]
  chats             Chat[]
}

model StudyGroupMember {
  id           Int                         @id @default(autoincrement())
  email        String
  studyGroupId String
  role         StudyGroupMemberRole
  activeState  StudyGroupMemberActiveState @default(INVITED)
  tags         String[]                    @default([])
  initiatorId  Int
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  studyGroup   StudyGroup                  @relation(fields: [studyGroupId], references: [id])
  initiator    User                        @relation(fields: [initiatorId], references: [id])

  @@unique([email, studyGroupId])
}

model CourseTag {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  type          CourseTagType
  authorId      Int
  courseId      String
  deleted       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User           @relation(fields: [authorId], references: [id])
  course        Course         @relation(fields: [courseId], references: [id])
  workTemplates WorkTemplate[]
  taskTemplates TaskTemplate[]
  codeTasks     CodeTask[]
}

model TaskVariant {
  id             String        @id @default(uuid())
  name           String        @db.VarChar(100)
  content        Json          @db.JsonB
  order          Int           @default(0)
  taskTemplateId String
  deleted        Boolean       @default(false)
  taskTemplate   TaskTemplate  @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  tasks          Task[]
  taskComments   TaskComment[]
}

model Task {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(100)
  inputType      InputType        @default(EDITOR)
  order          Int
  content        Json             @db.JsonB
  taskTemplateId String?
  workVariantId  String?
  taskVariantId  String?
  baseTaskId     String?
  workNoteId     String?
  editDisabled   Boolean          @default(false)
  deleted        Boolean          @default(false)
  active         Boolean          @default(false)
  taskTemplate   TaskTemplate?    @relation(fields: [taskTemplateId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  workVariant    WorkVariant?     @relation(fields: [workVariantId], references: [id], onDelete: Cascade)
  taskVariant    TaskVariant?     @relation(fields: [taskVariantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  baseTask       Task?            @relation(fields: [baseTaskId], references: [id], name: "BaseTask", onDelete: Cascade)
  baseTasks      Task[]           @relation(name: "BaseTask")
  userAnswers    UserWorkAnswer[]
  columns        Column[]
  taskComments   TaskComment[]
  workNote       WorkNote?
  examTasks      ExamTask[]
}

model Upload {
  id           String     @id @default(uuid())
  path         String     @db.VarChar(255)
  originalName String     @db.VarChar(255)
  size         Int
  humanSize    String
  meta         Json       @default("{}")
  instanceId   String?
  userId       Int?
  type         UploadType
  createdAt    DateTime   @default(now())
}

model WorkNote {
  id              String           @id @default(cuid())
  name            String
  description     String?          @db.Text
  courseId        String
  taskId          String           @unique
  authorId        Int
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  task            Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  workNoteAnswers WorkNoteAnswer[]
}

model WorkNoteAnswer {
  id         String    @id @default(cuid())
  answerUrls String[]  @default([])
  workNoteId String
  userId     Int
  scoreId    Int?
  finishDate DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  workNote   WorkNote  @relation(fields: [workNoteId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id])
  score      Score?    @relation(fields: [scoreId], references: [id])

  @@unique([workNoteId, userId])
}

model TaskComment {
  id            String       @id @default(uuid())
  value         Json
  taskId        String?
  userId        Int
  taskVariantId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  task          Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id])
  taskVariant   TaskVariant? @relation(fields: [taskVariantId], references: [id])

  @@unique([taskId, userId, taskVariantId])
}

model TaskTemplate {
  id           String        @id @default(cuid())
  description  String?       @db.Text
  public       Boolean       @default(true)
  name         String        @db.VarChar(100)
  inputType    InputType     @default(EDITOR)
  authorId     Int
  courseId     String
  deleted      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User          @relation(fields: [authorId], references: [id])
  course       Course        @relation(fields: [courseId], references: [id])
  tags         CourseTag[]
  taskVariants TaskVariant[]
  tasks        Task[]
}

model ExamTask {
  id          String   @id @default(cuid())
  description String?  @db.Text
  authorId    Int
  courseId    String
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
}

model WorkVariant {
  id                String           @id @default(uuid())
  name              String           @db.VarChar(100)
  workId            String
  workVariantTypeId Int?
  base              Boolean          @default(false)
  order             Int
  deleted           Boolean          @default(false)
  workVariantType   WorkVariantType? @relation(fields: [workVariantTypeId], references: [id], onDelete: SetNull)
  work              Work             @relation(fields: [workId], references: [id], onDelete: Cascade)
  userWorks         UserWork[]
  tasks             Task[]
}

model WorkVariantType {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  shortName    String        @db.VarChar(6)
  description  String?
  courseId     String
  colorScheme  String?       @db.VarChar(100)
  systemName   String?       @db.VarChar(100)
  deleted      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workVariants WorkVariant[]
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Work {
  id                 String         @id @default(uuid())
  name               String         @db.VarChar(255)
  description        String?        @db.Text
  hideCompletedTasks Boolean        @default(false)
  hideChat           Boolean        @default(false)
  deleted            Boolean        @default(false)
  studyGroupId       String?
  studyGroup         StudyGroup?    @relation(fields: [studyGroupId], references: [id])
  courseId           String?
  course             Course?        @relation(fields: [courseId], references: [id])
  workTemplates      WorkTemplate[]
  workVariants       WorkVariant[]
  linkedWorkId       String?
  linkedWork         Work?          @relation(fields: [linkedWorkId], references: [id], name: "LinkedWork")
  linkedWorks        Work[]         @relation(name: "LinkedWork")
  studyWork          StudyWork?
  rework             Rework?
  examTicket         ExamTicket?
  activity           Activity?
  userWorks          UserWork[]
}

model WorkTemplate {
  id        String      @id @default(cuid())
  public    Boolean     @default(true)
  workId    String
  authorId  Int
  courseId  String
  deleted   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation(fields: [authorId], references: [id])
  course    Course      @relation(fields: [courseId], references: [id])
  work      Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  tags      CourseTag[]
}

model ExamTicket {
  id        String   @id @default(cuid())
  workId    String   @unique
  authorId  Int
  courseId  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model StudyWork {
  id            String     @id @default(cuid())
  workId        String     @unique
  courseCreated Boolean    @default(false)
  authorId      Int
  studyGroupId  String
  workTypeId    Int?
  workType      WorkType?  @relation(fields: [workTypeId], references: [id], onDelete: SetNull)
  studyGroup    StudyGroup @relation(fields: [studyGroupId], references: [id])
  author        User       @relation(fields: [authorId], references: [id])
  work          Work       @relation(fields: [workId], references: [id], onDelete: Cascade)
  deleted       Boolean    @default(false)
  createdAt     DateTime   @default(now())
  startDate     DateTime?
  finishDate    DateTime?
  updatedAt     DateTime   @updatedAt
}

model Rework {
  id           String     @id @default(cuid())
  workId       String     @unique
  declined     Boolean    @default(false)
  userId       Int
  studyGroupId String
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  work         Work       @relation(fields: [workId], references: [id], onDelete: Cascade)
  deleted      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model WorkType {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  shortName       String           @db.VarChar(6)
  description     String?          @db.Text
  courseId        String
  deleted         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studyWorks      StudyWork[]
  columns         Column[]
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  computedColumns ComputedColumn[]
}

model UserWork {
  id            String      @id @default(cuid())
  startDate     DateTime?
  endDate       DateTime?
  userId        Int
  workVariantId String
  workId        String
  workVariant   WorkVariant @relation(fields: [workVariantId], references: [id], onDelete: Cascade)
  work          Work        @relation(fields: [workId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, workVariantId])
}

model UserWorkAnswer {
  id             String            @id @default(cuid())
  answer         Json?
  taskId         String
  userId         Int
  scoreId        Int?
  status         TaskStatus
  startDate      DateTime
  finishDate     DateTime?
  dangerActions  Int?              @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  comments       UserWorkComment[]
  task           Task              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id])
  score          Score?            @relation(fields: [scoreId], references: [id])
  userAnswerLogs UserAnswerLog[]

  @@unique([taskId, userId])
}

model UserWorkComment {
  id               Int            @id @default(autoincrement())
  value            Json
  userWorkAnswerId String
  userId           Int
  createdAt        DateTime       @default(now())
  user             User           @relation(fields: [userId], references: [id])
  answer           UserWorkAnswer @relation(fields: [userWorkAnswerId], references: [id])
}

model Material {
  id             String              @id @default(cuid())
  name           String              @db.VarChar(100)
  contentType    MaterialContentType
  authorId       Int
  courseId       String
  materialTypeId Int?
  content        Json
  active         Boolean             @default(true)
  contViews      Int                 @default(0)
  deleted        Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  author         User                @relation(fields: [authorId], references: [id])
  course         Course              @relation(fields: [courseId], references: [id])
  materialType   MaterialType?       @relation(fields: [materialTypeId], references: [id], onDelete: SetNull)
}

model MaterialType {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  shortName   String     @db.VarChar(6)
  description String?    @db.Text
  courseId    String
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  materials   Material[]
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Activity {
  id                     String                  @id @default(cuid())
  name                   String                  @db.VarChar(100)
  startDate              DateTime
  useTime                Boolean                 @default(false)
  authorId               Int
  studyGroupId           String?
  courseId               String?
  workId                 String                  @unique
  chatId                 String?                 @unique
  activityTypeId         Int?
  deleted                Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  author                 User                    @relation(fields: [authorId], references: [id])
  work                   Work                    @relation(fields: [workId], references: [id], onDelete: Cascade)
  chat                   Chat?                   @relation(fields: [chatId], references: [id], onDelete: SetNull)
  activityType           ActivityType?           @relation(fields: [activityTypeId], references: [id], onDelete: SetNull)
  studyGroup             StudyGroup?             @relation(fields: [studyGroupId], references: [id])
  course                 Course?                 @relation(fields: [courseId], references: [id])
  activityUserStatistics ActivityUserStatistic[]
  activityBoards         ActivityBoard[]
}

model ActivityBoard {
  id         Int      @id @default(autoincrement())
  activityId String
  page       Int
  value      Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([activityId, page])
}

model ActivityUserStatistic {
  id         String   @id @default(uuid())
  spentTime  Int
  activityId String
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([activityId, userId])
}

model ActivityType {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  shortName       String           @db.VarChar(6)
  description     String?          @db.Text
  courseId        String
  deleted         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activities      Activity[]
  columns         Column[]
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  computedColumns ComputedColumn[]
}

model Announcement {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(255)
  content           Json               @db.JsonB
  studyGroupId      String?
  courseId          String?
  pinned            Boolean            @default(false)
  deleted           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  studyGroup        StudyGroup?        @relation(fields: [studyGroupId], references: [id])
  course            Course?            @relation(fields: [courseId], references: [id])
  announcementViews AnnouncementView[]
}

model AnnouncementView {
  id             Int          @id @default(autoincrement())
  userId         Int
  announcementId String
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, announcementId])
}

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType
  content     Json             @db.JsonB
  userId      Int
  initiatorId Int?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  initiator   User?            @relation(fields: [initiatorId], references: [id], name: "initiator")
}

model Column {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(255)
  order          Int
  type           ColumnType    @default(BY_TASK)
  studyGroupId   String
  workTypeId     Int?
  activityTypeId Int?
  baseTaskId     String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deleted        Boolean       @default(false)
  studyGroup     StudyGroup    @relation(fields: [studyGroupId], references: [id])
  workType       WorkType?     @relation(fields: [workTypeId], references: [id], onDelete: SetNull)
  activityType   ActivityType? @relation(fields: [activityTypeId], references: [id], onDelete: SetNull)
  baseTask       Task?         @relation(fields: [baseTaskId], references: [id], onDelete: Cascade)
  scores         Score[]
}

model Score {
  id              Int              @id @default(autoincrement())
  userId          Int
  columnId        Int
  createdAt       DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id])
  column          Column           @relation(fields: [columnId], references: [id], onDelete: Cascade)
  value           Float
  estimatorId     Int
  estimator       User             @relation(name: "estimator", fields: [estimatorId], references: [id])
  userWorkAnswers UserWorkAnswer[]
  workNoteAnswers WorkNoteAnswer[]
}

model ComputedColumn {
  id            String                   @id @default(cuid())
  name          String                   @db.VarChar(255)
  description   String?                  @db.Text
  order         Int
  courseId      String
  formula       Json                     @db.JsonB
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  course        Course                   @relation(fields: [courseId], references: [id])
  studyGroups   StudyGroup[]
  showFormat    ComputedColumnShowFormat @default(ALL)
  activityTypes ActivityType[]
  workTypes     WorkType[]
  pinned        Boolean                  @default(true)
  hidden        Boolean                  @default(false)
}

model EventLog {
  id            Int           @id @default(autoincrement())
  initiatorId   Int?
  studyGroupId  String?
  courseId      String?
  course        Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studyGroup    StudyGroup?   @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  initiator     User?         @relation(fields: [initiatorId], references: [id], onDelete: SetNull)
  newValue      Json?         @db.JsonB
  oldValue      Json?         @db.JsonB
  eventType     String
  initiatorType InitiatorType
  entityId      String?       @db.VarChar(255)
  createdAt     DateTime      @default(now())
}

model Chat {
  id                  String      @id @default(cuid())
  creatorId           Int?
  avatarUrl           String?
  type                ChatType    @default(SINGLE)
  courseContextId     String?
  studyGroupContextId String?
  name                String?
  description         String?     @db.Text
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deleted             Boolean     @default(false)
  chatUsers           ChatUser[]
  creator             User?       @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  courseContext       Course?     @relation(fields: [courseContextId], references: [id], onDelete: Cascade)
  studyGroupContext   StudyGroup? @relation(fields: [studyGroupContextId], references: [id], onDelete: Cascade)
  messages            Message[]
  activity            Activity?
}

model ChatUser {
  id        String       @id @default(uuid())
  chatId    String
  userId    Int
  inviterId Int?
  role      ChatUserRole @default(USER)
  createdAt DateTime     @default(now())
  inviter   User?        @relation(name: "inviter", fields: [inviterId], references: [id], onDelete: SetNull)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id                Int               @id @default(autoincrement())
  chatId            String
  userId            Int?
  forwardMessageId  Int?
  replayedMessageId Int?
  content           Json?             @db.JsonB
  pinned            Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deleted           Boolean           @default(false)
  chat              Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  forwardByMessage  Message?          @relation(name: "Forwared", fields: [forwardMessageId], references: [id], onDelete: SetNull)
  forwardMessages   Message[]         @relation(name: "Forwared")
  replayedByMessage Message?          @relation(name: "Replaied", fields: [replayedMessageId], references: [id], onDelete: SetNull)
  replayedMessages  Message[]         @relation(name: "Replaied")
  attachments       Attachment[]
  reactionMessage   ReactionMessage[]
  readedMessages    ReadedMessages[]
}

model Attachment {
  id        String   @id @default(uuid())
  messageId Int
  uploadId  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model ReactionMessage {
  id         Int      @id @default(autoincrement())
  reactionId String
  messageId  Int
  userId     Int
  reaction   Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reaction {
  id              String            @id @default(cuid())
  code            String
  createdAt       DateTime          @default(now())
  uploadId        String
  userId          Int?
  reactionMessage ReactionMessage[]
  author          User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ReadedMessages {
  id        Int      @id @default(autoincrement())
  userId    Int
  messageId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}

model UserAnswerLog {
  id           Int               @id @default(autoincrement())
  eventType    UserAnswerLogType
  userAnswerId String
  value        Json?             @db.JsonB
  newComment   Json?             @db.JsonB
  status       TaskStatus
  initiatorId  Int
  createdAt    DateTime          @default(now())
  userAnswer   UserWorkAnswer    @relation(fields: [userAnswerId], references: [id], onDelete: Cascade)
  initiator    User              @relation(fields: [initiatorId], references: [id], onDelete: Cascade)
}

model ChangeLog {
  id                 String              @id @default(cuid())
  name               String
  content            Json                @db.JsonB
  version            String
  viewsCount         Int
  issueTypes         IssueType[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  issues             Issue[]
  changeLogReactions ChangeLogReaction[]
}

model ChangeLogReaction {
  id          String    @id @default(cuid())
  changeLogId String
  emoji       String
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  changeLog   ChangeLog @relation(fields: [changeLogId], references: [id], onDelete: Cascade)

  @@unique([changeLogId, userId, emoji])
}

model Issue {
  id             String          @id @default(cuid())
  name           String
  content        Json            @db.JsonB
  code           Int             @default(autoincrement())
  changeLogId    String?
  type           IssueType
  priority       IssuePriority
  status         IssueStatus
  authorId       Int
  public         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  changeLog      ChangeLog?      @relation(fields: [changeLogId], references: [id], onDelete: Cascade)
  issueReactions IssueReaction[]
  issueComments  IssueComment[]
}

model IssueReaction {
  id        String   @id @default(cuid())
  value     Int
  issueId   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@unique([issueId, userId])
}

model IssueComment {
  id                    String                 @id @default(cuid())
  issueId               String
  userId                Int
  content               Json                   @db.JsonB
  parentCommentId       String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue                 Issue                  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  parentComment         IssueComment?          @relation(name: "Parent", fields: [parentCommentId], references: [id], onDelete: Cascade)
  issueComments         IssueComment[]         @relation(name: "Parent")
  issueCommentReactions IssueCommentReaction[]
}

model IssueCommentReaction {
  id             String       @id @default(cuid())
  issueCommentId String
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueComment   IssueComment @relation(fields: [issueCommentId], references: [id], onDelete: Cascade)

  @@unique([issueCommentId, userId])
}

model Legal {
  id        String      @id @default(cuid())
  content   Json        @db.JsonB
  type      LegalType
  status    LegalStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CodeTask {
  id                String                @id @default(uuid())
  name              String
  mainFunctionName  String?
  returnType        CodeDataType
  description       Json                  @db.JsonB
  difficulty        CodeTaskDifficulty    @default(MEDIUM)
  showDataInTesting Boolean               @default(false)
  authorId          Int?
  author            User?                 @relation(fields: [authorId], references: [id], onDelete: SetNull)
  allowedLanguages  ProgrammingLanguage[]
  tags              CourseTag[]
  inputVariables    InputVariable[]
  courseId          String?
  course            Course?               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  testCases         TestCase[]
  codeSolutions     CodeSolution[]
}

model InputVariable {
  id             Int             @id @default(autoincrement())
  name           String
  taskId         String
  order          Int
  nullable       Boolean         @default(false)
  type           CodeDataType
  task           CodeTask        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  testCaseInputs TestCaseInput[]
}

model TestCase {
  id             Int             @id @default(autoincrement())
  name           String?
  order          Int
  explanation    Json?           @db.JsonB
  showInExample  Boolean         @default(false)
  taskId         String
  task           CodeTask        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  outputValue    Json            @db.JsonB
  testCaseInputs TestCaseInput[]
  testCaseRuns   TestCaseRun[]
}

model TestCaseInput {
  id              Int            @id @default(autoincrement())
  testCaseId      Int
  testCase        TestCase       @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  inputVariableId Int?
  inputVariable   InputVariable? @relation(fields: [inputVariableId], references: [id], onDelete: SetNull)
  value           Json           @db.JsonB

  @@unique([testCaseId, inputVariableId])
}

model TestCaseRun {
  id         Int               @id @default(autoincrement())
  testCaseId Int
  testCase   TestCase          @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  solutionId String
  solution   CodeSolution      @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  status     TestCaseRunStatus @default(PENDING)
  timeMs     Int               @default(0)
  errTitle   String?
  errContent String?           @db.Text
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model CodeSolution {
  id                  String              @id @default(uuid())
  taskId              String
  task                CodeTask            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  programmingLanguage ProgrammingLanguage
  userId              Int
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  code                String              @db.Text
  asAnswer            Boolean             @default(false)
  testCaseRuns        TestCaseRun[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([userId, taskId])
}

model Quiz {
  id            String         @id @default(cuid())
  name          String
  avatarUrl     String?
  greeting      Json           @db.JsonB
  courseId      String
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  quizExercises QuizExercise[]
}

model QuizExercise {
  id                  String               @id @default(cuid())
  name                String
  content             Json                 @db.JsonB
  quizId              String
  quiz                Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  quizExerciseAnswers QuizExerciseAnswer[]
  quizUserAnswers     QuizUserAnswer[]
}

model QuizExerciseAnswer {
  id             String                 @id @default(cuid())
  type           QuizExerciseAnswerType
  content        Json                   @db.JsonB
  quizExerciseId String
  quizExercise   QuizExercise           @relation(fields: [quizExerciseId], references: [id], onDelete: Cascade)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model QuizUserAnswer {
  id             String                 @id @default(cuid())
  type           QuizExerciseAnswerType
  content        Json                   @db.JsonB
  userId         Int
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizExerciseId String
  quizExercise   QuizExercise           @relation(fields: [quizExerciseId], references: [id], onDelete: Cascade)
  correct        Boolean
  createdAt      DateTime               @unique() @default(now())
  updatedAt      DateTime               @updatedAt
}
